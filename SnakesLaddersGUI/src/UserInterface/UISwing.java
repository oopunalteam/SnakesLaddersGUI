/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Data.Board;
import Data.Player;
import Data.Square;
import java.awt.Component;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/**
 *
 * @author sergioalejandro
 */
public class UISwing extends JFrame implements UI {

    private int selectedOption;

    /**
     * Creates new form UISwing
     */
    public UISwing() {
        initComponents();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        Menu = new javax.swing.JPanel();
        Title = new javax.swing.JLabel();
        MenuOptions = new javax.swing.JPanel();
        Setup = new javax.swing.JButton();
        About = new javax.swing.JButton();
        Instructions = new javax.swing.JButton();
        Quit = new javax.swing.JButton();
        GameSetup = new javax.swing.JPanel();
        Title1 = new javax.swing.JLabel();
        GameSettings = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        BoardSize = new javax.swing.JComboBox<>();
        NumberPlayers = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        OK1 = new javax.swing.JButton();
        Cancel1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        Menu.setLayout(new java.awt.GridBagLayout());

        Title.setText("Snakes & Ladders");
        Menu.add(Title, new java.awt.GridBagConstraints());

        MenuOptions.setLayout(new java.awt.GridBagLayout());

        Setup.setText("Play");
        Setup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SetupActionPerformed(evt);
            }
        });
        MenuOptions.add(Setup, new java.awt.GridBagConstraints());

        About.setText("About");
        About.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        MenuOptions.add(About, gridBagConstraints);

        Instructions.setText("Instrutions");
        Instructions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InstructionsActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        MenuOptions.add(Instructions, gridBagConstraints);

        Quit.setText("Quit");
        Quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        MenuOptions.add(Quit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        Menu.add(MenuOptions, gridBagConstraints);
        MenuOptions.getAccessibleContext().setAccessibleName("Menu");

        getContentPane().add(Menu);

        GameSetup.setLayout(new java.awt.GridBagLayout());

        Title1.setText("Snakes & Ladders");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        GameSetup.add(Title1, gridBagConstraints);

        GameSettings.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Select the size of the board");
        jLabel1.setToolTipText("");
        GameSettings.add(jLabel1, new java.awt.GridBagConstraints());

        jLabel2.setText("Select the number of players");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        GameSettings.add(jLabel2, gridBagConstraints);

        BoardSize.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        BoardSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoardSizeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        GameSettings.add(BoardSize, gridBagConstraints);

        NumberPlayers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        NumberPlayers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberPlayersActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        GameSettings.add(NumberPlayers, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        GameSetup.add(GameSettings, gridBagConstraints);

        jPanel1.setLayout(new java.awt.GridLayout());

        OK1.setText("OK");
        OK1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OK1ActionPerformed(evt);
            }
        });
        jPanel1.add(OK1);

        Cancel1.setText("Cancel");
        Cancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Cancel1ActionPerformed(evt);
            }
        });
        jPanel1.add(Cancel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        GameSetup.add(jPanel1, gridBagConstraints);

        getContentPane().add(GameSetup);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void QuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuitActionPerformed
        selectedOption = 4;
    }//GEN-LAST:event_QuitActionPerformed

    private void SetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SetupActionPerformed
        selectedOption = 1;
        Menu.setVisible(false);
        GameSetup.setVisible(true);
    }//GEN-LAST:event_SetupActionPerformed

    private void AboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutActionPerformed
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "This game is a text version of Snakes & Ladders, a group proyect for OOP");
// TODO add your handling code here:
    }//GEN-LAST:event_AboutActionPerformed

    private void BoardSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoardSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_BoardSizeActionPerformed

    private void OK1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OK1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OK1ActionPerformed

    private void NumberPlayersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumberPlayersActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NumberPlayersActionPerformed

    private void Cancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Cancel1ActionPerformed
        GameSetup.setVisible(false);
        this.printMenu();
    }//GEN-LAST:event_Cancel1ActionPerformed

    private void InstructionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InstructionsActionPerformed
        Component frame = null;
        JOptionPane.showMessageDialog(frame, "Who needs instructions for snakes and ladders?");        // TODO add your handling code here:
    }//GEN-LAST:event_InstructionsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton About;
    private javax.swing.JComboBox<String> BoardSize;
    private javax.swing.JButton Cancel1;
    private javax.swing.JPanel GameSettings;
    private javax.swing.JPanel GameSetup;
    private javax.swing.JButton Instructions;
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel MenuOptions;
    private javax.swing.JComboBox<String> NumberPlayers;
    private javax.swing.JButton OK1;
    private javax.swing.JButton Quit;
    private javax.swing.JButton Setup;
    private javax.swing.JLabel Title;
    private javax.swing.JLabel Title1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void printMenu() {
        Menu.setVisible(true);
        selectedOption = -1;

    }

    @Override
    public int menuOptions() {
        while (selectedOption == -1) {
            pause();
        }
        return selectedOption;
    }

    @Override
    public void printInstructions() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void printAbout() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int askSize() {
        int selectSize = 0;
        if (BoardSize.getSelectedItem() == "Item 1") {
            selectSize = 1;
        } else if (BoardSize.getSelectedItem() == "Item 2") {
            selectSize = 2;
        }
        return selectSize;
    }

    @Override
    public int askPlayerNum() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public char askToken(int playerNum) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void printBoard(Board board) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void playerWins() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void askRoll(Player player) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void turnFeedback(int move, Player player, Square position) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void arcFeedback(boolean good, int entry, int exit) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void badFeedback() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public int askMovement(Board board) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void pause() {
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
            Logger.getLogger(UISwing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}

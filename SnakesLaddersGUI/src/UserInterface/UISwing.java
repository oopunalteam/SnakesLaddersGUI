/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import static Business.GamePlay.menu;
import Data.Board;
import Data.Player;
import Data.Square;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 *
 * @author sergioalejandro
 */
public class UISwing extends JFrame implements UI {

    private int selectedOption;
    boolean confirmBoard = false;
    boolean confirmedPlayers = false;
    boolean diceRolled = false;
    
    private ArrayList<JLabel> players=null;
    
    private ArrayList<JLabel> boardUI=null;
    private ArrayList<Integer> boardColor=null;

    /**
     * Creates new form UISwing
     */
    public UISwing() {
        initComponents();
        this.setVisible(true);
        MenuWindow.setVisible(false);
        SetupWindow.setVisible(false);
        PlayerSetup.setVisible(false);
        BoardWindow.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        instructionsOptionPane = new javax.swing.JOptionPane();
        aboutOptionPane = new javax.swing.JOptionPane();
        MenuWindow = new javax.swing.JPanel();
        MenuOptions = new javax.swing.JPanel();
        playButton = new javax.swing.JButton();
        aboutButton = new javax.swing.JButton();
        instructionsButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        SetupWindow = new javax.swing.JPanel();
        GameSetup = new javax.swing.JPanel();
        boardSizeLabel = new javax.swing.JLabel();
        playerNumberLabel = new javax.swing.JLabel();
        boardSizeBox = new javax.swing.JComboBox<>();
        numberPlayersBox = new javax.swing.JComboBox<>();
        PlayerInstructions = new javax.swing.JLabel();
        PlayerSetup = new javax.swing.JPanel();
        player1Panel = new javax.swing.JPanel();
        player1Label = new javax.swing.JLabel();
        player1Text = new javax.swing.JTextField();
        player2Panel = new javax.swing.JPanel();
        player2Label = new javax.swing.JLabel();
        player2Text = new javax.swing.JTextField();
        setupLabel = new javax.swing.JLabel();
        ok1Button = new javax.swing.JButton();
        FillerPanel = new javax.swing.JPanel();
        BoardWindow = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextBoard = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        dice1Button = new javax.swing.JButton();
        boardMessages = new javax.swing.JLabel();
        playerPrompt = new javax.swing.JLabel();
        Tablero = new javax.swing.JPanel();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("UserInterface/Bundle"); // NOI18N
        instructionsOptionPane.setToolTipText(bundle.getString("UISwing.instructionsOptionPane.toolTipText")); // NOI18N

        aboutOptionPane.setToolTipText(bundle.getString("UISwing.aboutOptionPane.toolTipText")); // NOI18N

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(bundle.getString("UISwing.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(650, 300));
        getContentPane().setLayout(new javax.swing.OverlayLayout(getContentPane()));

        MenuWindow.setLayout(new java.awt.GridBagLayout());

        MenuOptions.setLayout(new java.awt.GridBagLayout());

        playButton.setText(bundle.getString("UISwing.playButton.text")); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });
        MenuOptions.add(playButton, new java.awt.GridBagConstraints());

        aboutButton.setText(bundle.getString("UISwing.aboutButton.text")); // NOI18N
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        MenuOptions.add(aboutButton, gridBagConstraints);

        instructionsButton.setText(bundle.getString("UISwing.instructionsButton.text")); // NOI18N
        instructionsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                instructionsButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        MenuOptions.add(instructionsButton, gridBagConstraints);

        quitButton.setText(bundle.getString("UISwing.quitButton.text")); // NOI18N
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        MenuOptions.add(quitButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        MenuWindow.add(MenuOptions, gridBagConstraints);
        MenuOptions.getAccessibleContext().setAccessibleName(bundle.getString("UISwing.MenuOptions.AccessibleContext.accessibleName")); // NOI18N

        nameLabel.setText(bundle.getString("UISwing.nameLabel.text")); // NOI18N
        MenuWindow.add(nameLabel, new java.awt.GridBagConstraints());

        getContentPane().add(MenuWindow);

        SetupWindow.setLayout(new java.awt.GridBagLayout());

        GameSetup.setLayout(new java.awt.GridBagLayout());

        boardSizeLabel.setText(bundle.getString("UISwing.boardSizeLabel.text")); // NOI18N
        boardSizeLabel.setToolTipText(bundle.getString("UISwing.boardSizeLabel.toolTipText")); // NOI18N
        GameSetup.add(boardSizeLabel, new java.awt.GridBagConstraints());

        playerNumberLabel.setText(bundle.getString("UISwing.playerNumberLabel.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        GameSetup.add(playerNumberLabel, gridBagConstraints);

        boardSizeBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "8×8", "10×10", "12×12" }));
        boardSizeBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boardSizeBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        GameSetup.add(boardSizeBox, gridBagConstraints);

        numberPlayersBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2" }));
        numberPlayersBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberPlayersBoxActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        GameSetup.add(numberPlayersBox, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        SetupWindow.add(GameSetup, gridBagConstraints);

        PlayerInstructions.setText(bundle.getString("UISwing.PlayerInstructions.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        SetupWindow.add(PlayerInstructions, gridBagConstraints);

        PlayerSetup.setLayout(new java.awt.GridBagLayout());

        player1Panel.setLayout(new javax.swing.BoxLayout(player1Panel, javax.swing.BoxLayout.LINE_AXIS));

        player1Label.setText(bundle.getString("UISwing.player1Label.text")); // NOI18N
        player1Panel.add(player1Label);

        player1Text.setText(bundle.getString("UISwing.player1Text.text")); // NOI18N
        player1Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player1TextActionPerformed(evt);
            }
        });
        player1Panel.add(player1Text);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        PlayerSetup.add(player1Panel, gridBagConstraints);

        player2Panel.setLayout(new javax.swing.BoxLayout(player2Panel, javax.swing.BoxLayout.LINE_AXIS));

        player2Label.setText(bundle.getString("UISwing.player2Label.text")); // NOI18N
        player2Panel.add(player2Label);

        player2Text.setText(bundle.getString("UISwing.player2Text.text")); // NOI18N
        player2Text.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2TextActionPerformed(evt);
            }
        });
        player2Panel.add(player2Text);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        PlayerSetup.add(player2Panel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        SetupWindow.add(PlayerSetup, gridBagConstraints);

        setupLabel.setText(bundle.getString("UISwing.setupLabel.text")); // NOI18N
        SetupWindow.add(setupLabel, new java.awt.GridBagConstraints());

        ok1Button.setText(bundle.getString("UISwing.ok1Button.text")); // NOI18N
        ok1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ok1ButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        SetupWindow.add(ok1Button, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        SetupWindow.add(FillerPanel, gridBagConstraints);

        getContentPane().add(SetupWindow);

        BoardWindow.setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.PAGE_AXIS));

        TextBoard.setColumns(20);
        TextBoard.setRows(5);
        jScrollPane1.setViewportView(TextBoard);

        jPanel1.add(jScrollPane1);

        BoardWindow.add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        dice1Button.setText(bundle.getString("UISwing.dice1Button.text")); // NOI18N
        dice1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dice1ButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel2.add(dice1Button, gridBagConstraints);

        boardMessages.setText(bundle.getString("UISwing.boardMessages.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(boardMessages, gridBagConstraints);

        playerPrompt.setText(bundle.getString("UISwing.playerPrompt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        jPanel2.add(playerPrompt, gridBagConstraints);

        BoardWindow.add(jPanel2, java.awt.BorderLayout.PAGE_START);

        getContentPane().add(BoardWindow);

        Tablero.setMinimumSize(Tablero.getPreferredSize());
        Tablero.setOpaque(false);
        Tablero.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        getContentPane().add(Tablero);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        selectedOption = 4;
    }//GEN-LAST:event_quitButtonActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        selectedOption = 1;
        MenuWindow.setVisible(false);
        SetupWindow.setVisible(true);
    }//GEN-LAST:event_playButtonActionPerformed

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        selectedOption = 3;
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void boardSizeBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boardSizeBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_boardSizeBoxActionPerformed

    private void ok1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ok1ButtonActionPerformed
        //Goes to player setup
        this.initBoard(3);
        ArrayList<String> playerslist=new ArrayList<>();
        playerslist.add("Player1");
        playerslist.add("1");
        playerslist.add("Player2");
        playerslist.add("2");
        this.initPlayers(playerslist);
        MenuWindow.setVisible(false);
        SetupWindow.setVisible(false);
        //PlayerSetup.setVisible(true);
        Tablero.setVisible(true);
        BoardWindow.setVisible(false);
        confirmBoard = true;
    }//GEN-LAST:event_ok1ButtonActionPerformed

    private void numberPlayersBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberPlayersBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_numberPlayersBoxActionPerformed

    private void instructionsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_instructionsButtonActionPerformed
        selectedOption = 2;
    }//GEN-LAST:event_instructionsButtonActionPerformed

    private void dice1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dice1ButtonActionPerformed
        diceRolled = true;
    }//GEN-LAST:event_dice1ButtonActionPerformed

    private void player1TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player1TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player1TextActionPerformed

    private void player2TextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2TextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player2TextActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BoardWindow;
    private javax.swing.JPanel FillerPanel;
    private javax.swing.JPanel GameSetup;
    private javax.swing.JPanel MenuOptions;
    private javax.swing.JPanel MenuWindow;
    private javax.swing.JLabel PlayerInstructions;
    private javax.swing.JPanel PlayerSetup;
    private javax.swing.JPanel SetupWindow;
    private javax.swing.JPanel Tablero;
    private javax.swing.JTextArea TextBoard;
    private javax.swing.JButton aboutButton;
    private javax.swing.JOptionPane aboutOptionPane;
    private javax.swing.JLabel boardMessages;
    private javax.swing.JComboBox<String> boardSizeBox;
    private javax.swing.JLabel boardSizeLabel;
    private javax.swing.JButton dice1Button;
    private javax.swing.JButton instructionsButton;
    private javax.swing.JOptionPane instructionsOptionPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JComboBox<String> numberPlayersBox;
    private javax.swing.JButton ok1Button;
    private javax.swing.JButton playButton;
    private javax.swing.JLabel player1Label;
    private javax.swing.JPanel player1Panel;
    private javax.swing.JTextField player1Text;
    private javax.swing.JLabel player2Label;
    private javax.swing.JPanel player2Panel;
    private javax.swing.JTextField player2Text;
    private javax.swing.JLabel playerNumberLabel;
    private javax.swing.JLabel playerPrompt;
    private javax.swing.JButton quitButton;
    private javax.swing.JLabel setupLabel;
    // End of variables declaration//GEN-END:variables

    @Override
    public int printMenu() {
        SetupWindow.setVisible(false);
        MenuWindow.setVisible(true);
        selectedOption = -1;
        
        while (selectedOption == -1) {
            pause();
        }
        return selectedOption;
    }

    @Override
    public void printInstructions() {
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("UserInterface/Bundle");
        JOptionPane.showMessageDialog(instructionsOptionPane, bundle.getString("UISwing.InstructionsOptionPaneText"));
    }
    @Override
    public void printAbout() {
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("UserInterface/Bundle");
        JOptionPane.showMessageDialog(aboutOptionPane, bundle.getString("UISwing.aboutOptionPaneText"));    
    }

    @Override
    public int askSize() {
        int selectSize = 0;
        while (!confirmBoard) {
            pause();
        }
        String sizeString = (String) boardSizeBox.getModel().getSelectedItem();

        if (sizeString != null) {
            switch (sizeString) {
                case "8×8":
                    selectSize = 1;
                    break;
                case "10×10":
                    selectSize = 2;
                    break;
                case "12×12":
                    selectSize = 3;
                    break;
                default:
                    break;
            }
        }

        return selectSize;
    }

    @Override
    public int askPlayerNum() {
        while (!confirmBoard) {
            pause();
        }     
        String numberString = (String) boardSizeBox.getModel().getSelectedItem();
        char numberChar = numberString.charAt(0);
        int selectNumber = Character.getNumericValue(numberChar);
        
        switch (selectNumber) {
            case 1:
                player1Panel.setVisible(true);
                player2Panel.setVisible(false);
                break;
            case 2:
                player1Panel.setVisible(true);
                player2Panel.setVisible(true);
                break;
        }

        return selectNumber;
    }

    @Override
    public char askToken(int playerNum) {
        
        char token = 'a';
        switch (playerNum) {
            case 0:
                token = 'a';
            case 1:
                token = 'b';
        }
        return token;
    }

    @Override
    public void printBoard(Board board) {
        TextBoard.setText(board.toString());
        
        for(int i=0;i<board.getSize();i++) {
            
        }
    }

    @Override
    public void playerWins(Player player) {
        MenuWindow.setVisible(true);
        SetupWindow.setVisible(false);
        PlayerSetup.setVisible(false);
        BoardWindow.setVisible(false);
        
        TextBoard.setText("");
        playerPrompt.setText("");
        boardMessages.setText("");

        Component frame = null;
        JOptionPane.showMessageDialog(frame, "Player " + player + " you win!");

        }

    @Override
    public void askRoll(Player player) {
        playerPrompt.setText("Player " + player + ", roll dice?");
        while (!diceRolled) {
            pause();
        }
    }

    @Override
    public void turnFeedback(int move, Player player, Square position) {
        switch (move) {
            case 1:
                System.out.print("Bummer");
                break;
            case 2:
                System.out.print("Meh");
                break;
            case 3:
                System.out.print("Ok");
                break;
            case 4:
                System.out.print("Good");
                break;
            case 5:
                System.out.print("Great");
                break;
            case 6:
                System.out.print("WOW");
                break;
        }
        boardMessages.setText("player " + player + ", you rolled a " + move + ". You're now at square " + String.valueOf(position.getIndex()));
        diceRolled = false;
    }

    @Override
    public void arcFeedback(boolean good, int entry, int exit) {
        if (good) {
            boardMessages.setText("You climbed a ladder! You moved from square " + entry + " to square " + exit);
        } else if (!good) {
            boardMessages.setText("A snake attacked you! You moved from square " + entry + " to square " + exit);
        }
    }

    @Override
    public void badFeedback() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void pause() {
        try {
            Thread.sleep(50);
        } catch (InterruptedException ex) {
            Logger.getLogger(UISwing.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void initBoard(int size) {
        boardUI=new ArrayList<>();
        boardColor=new ArrayList<>();
        int length=0;
        switch(size) {
            case 1:
                length=8;
                break;
            case 2:
                length=10;
                break;
            case 3:
                length=12;
                break;
        }
        Tablero.setLayout(null);
        Tablero.setSize(length*50,length*50);
        Tablero.setPreferredSize(Tablero.getSize());
        Tablero.setMaximumSize(Tablero.getSize());
        Tablero.setMinimumSize(Tablero.getSize());
        this.setSize(length*50,length*50);
        for(int i=0; i<length;i++){
                for(int j=0; j<length;j++){
                    JLabel newJLabel1 = new javax.swing.JLabel();
                    newJLabel1.setMaximumSize(new java.awt.Dimension(50, 50));
                    newJLabel1.setMinimumSize(new java.awt.Dimension(50, 50));
                    newJLabel1.setPreferredSize(new java.awt.Dimension(50, 50));
                    Tablero.add(newJLabel1);
                    newJLabel1.setBounds((length*50)-(j+1)*50, (length*50)-(i+1)*50, 50, 50);
                    newJLabel1.setVerticalTextPosition(SwingConstants.CENTER);
                    newJLabel1.setHorizontalTextPosition(SwingConstants.CENTER);
                    boolean flag=true;
                    int random=0;
                    while(flag) {
                        boolean test=true;
                        random = 1+(int)(Math.random()*4);
                        if(j>0 && boardColor.get(i*length+j-1)==random)
                            test=false;
                        
                        if(i>0 && boardColor.get((i-1)*length+j)==random)
                            test=false;
                        
                        if(test)
                            flag=false;
                    }
                    
                    newJLabel1.setIcon(new ImageIcon("back"+String.valueOf(random)+".jpg"));
                    newJLabel1.setText(String.valueOf(j+i*length+1));
                    if(random==1) {
                        newJLabel1.setForeground(Color.BLACK);
                    }
                    else {
                        newJLabel1.setForeground(Color.WHITE);
                    }
                    newJLabel1.setFont(new Font(newJLabel1.getFont().getName(), Font.BOLD, 20));
                    boardUI.add(newJLabel1);
                    boardColor.add(random);
                }
        }
    }
    
    private void initPlayers(ArrayList<String> playersList) {
        players=new ArrayList<>();
        for(int i=0; i<playersList.size()/2; i++) {
            JLabel newJLabel1 = new javax.swing.JLabel();
            newJLabel1.setMaximumSize(new java.awt.Dimension(50, 50));
            newJLabel1.setMinimumSize(new java.awt.Dimension(50, 50));
            newJLabel1.setPreferredSize(new java.awt.Dimension(50, 50));
            newJLabel1.setIcon(new ImageIcon("J"+playersList.get(2*i+1)+".png"));
            newJLabel1.setBounds(Tablero.getWidth()-50, Tablero.getHeight()-50,50,50);
            Tablero.add(newJLabel1);
            Tablero.setComponentZOrder(newJLabel1, 0);

            players.add(newJLabel1);
        }
    }
    
    

}
